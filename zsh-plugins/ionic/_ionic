#compdef ionic
#autoload

typeset -A opt_args
local context state line

_ionic() {
  local context state line curcontext="$curcontext"

  if (( CURRENT > 2 )); then
    (( CURRENT-- ))
    shift words
    _call_function - "__ionic_${words[1]}" || _nothing
  else
    __ionic_commands
  fi
}


__ionic_commands() {
  local context state line curcontext="$curcontext"

  _arguments -C \
  ': :->command'

  case "$state" in
    command)
  local -a commands

  commands=(
  start'[Starts a new Ionic project in the specified PATH]'
  cordova'[cordova command]'
  help'[Provides help for a certain command]'
  info'[List information about the users runtime environment]'
  serve'[Start a local development server for app dev/testing]'
  {generate,g}'[Generate pages and components]'
  resources'[Automatically create icon and splash screen resources]'
  )

  _values 'command' $commands
  ;;
  esac
}

__ionic_start() {
  __ionic_start_options
}

__ionic_start_options() {
  local -a commands

  commands=(
  {--appname,-a}'[Human readable name for the app]'
  {--id,-i}'[Package name for <widget id> config, ex: com.mycompany.myapp]'
  --skip-npm'[Skip npm package installation]'
  {--list,-l}'[List starter templates available]'
  {--template,-t}'[Project starter template]'
  {--v2,-v}'[Start a Ionic v2 project]'
  )

  _values 'command' $commands
}

__ionic_cordova() {
  local context state line curcontext="$curcontext"

  if (( CURRENT > 2 )); then
    (( CURRENT-- ))
    shift word
    _call_function - "__ionic_${words[2]}" || _nothing
  else
    __ionic_cordova_commands
  fi
}

__ionic_cordova_commands() {
 local context state line curcontext="$curcontext"

 _arguments -C \
 ': :->command'

 case "$state" in
  command)
local -a commands

commands=(
  run'[Run an Ionic project on a connected device]'
  build'[Build (prepare + compile) an Ionic project for a given platform]'
  emulate'[Emulate an Ionic project on a simulator or emulator]'
  platform'[Add platform target for building an Ionic app]'
  plugin'[Add a Cordova plugin]'
  )

_values 'command' $commands
;;
esac
}

__ionic_serve() {
  __ionic_serve_options
}

__ionic_serve_options() {
  local -a commands

  commands=(
  {--consolelogs,-c}'[Print app console logs to Ionic CLI]'
  {--serverlogs,-s}'[Print dev server logs to Ionic CLI]'
  {--port,-p}'[Dev server HTTP port (8100 default)]'
  {--livereload-port,-r}'[Live Reload port (35729 default)]'
  {--nobrowser,-b}'[Disable launching a browser]'
  {--nolivereload,-d}'[Do not start live reload]'
  {--noproxy,-x}'[Do not add proxies]'
  {--browser,-w}'[Specifies the browser to use (safari, firefox, chrome)]'
  {--platform,-t}'[Start serve with a specific platform (ios/android)]'
  )

  _values 'command' $commands
}

__ionic_plugin() {
  local context state line curcontext="$curcontext"

  if (( CURRENT > 2 )); then
    (( CURRENT-- ))
    shift word
    _call_function - "__ionic_plugin_${words[2]}" || _nothing
  else
    __ionic_plugin_commands
  fi
}

__ionic_plugin_commands (){
 local context state line curcontext="$curcontext"

 _arguments -C \
 ': :->command'

 case "$state" in
  command)
local -a commands

commands=(
  add'[add plugin]'
  {rm,remove}'[remove plugin]'
  {ls,list}'[list all currently installed plugins]'
  search'[search the plugin registry for plugins matching the keywords]'
  )

_values 'command' $commands
;;
esac
}

__ionic_platform() {
  local context state line curcontext="$curcontext"

  if (( CURRENT > 2 )); then
    (( CURRENT-- ))
    shift word
    _call_function - "__ionic_platform_${words[3]}" || _nothing
  else
    __ionic_platform_commands
  fi
}

__ionic_platform_commands (){
 local context state line curcontext="$curcontext"

 _arguments -C \
 ': :->command'

 case "$state" in
  command)
local -a commands

commands=(
  add'[add platform]'
  {rm,remove}'[remove platform]'
  {ls,list}'[list all currently installed plugins]'
  {up,update}'[update the version of ionic]'
  search'[search the plugin registry for plugins matching the keywords]'
  )

_values 'command' $commands
;;
esac
}

__ionic_resources() {
  local context state line curcontext="$curcontext"

  if (( CURRENT > 2 )); then
    (( CURRENT-- ))
    shift word
    _call_function - "__ionic_resources_${words[2]}" || _nothing
  else
    __ionic_resources_commands
  fi
}

__ionic_resources_commands (){
 local context state line curcontext="$curcontext"

 _arguments -C \
 ': :->command'

 case "$state" in
  command)
local -a commands

commands=(
  --icon'[Automatically generate icons]'
  --splash'[Automatically generate splash screens]'
  )

_values 'command' $commands
;;
esac
}

__ionic_generate() {
  local context state line curcontext="$curcontext"

  if (( CURRENT > 2 )); then
    (( CURRENT-- ))
    shift word
    _call_function - "__ionic_generate_${words[2]}" || _nothing
  else
    __ionic_generate_commands
  fi
  __ionic_generate_options
}

__ionic_generate_options() {
  local -a commands

  commands=(
  --list'[List available generators]'
  --includeSpec'[Create test spec basic to pages, components, directives, pipes and providers]'
  --componentsDir'[Path directory target is created component]'
  --directivesDir'[Path directory target is created directive]'
  --pagesDir'[Path directory target is created page]'
  --pipesDir'[Path directory target is created pipe]'
  --providersDir'[Path directory target is created provider]'
  --templateDir'[Path directory templates custom to pages, components, directives, pipes and providers]'
  )

  _values 'command' $commands
}

__ionic_g() {
  __ionic_generate
}

__ionic_generate_commands (){
  local context state line curcontext="$curcontext"

  _arguments -C \
  ': :->command'

  case "$state" in
    command)
  local -a commands

  commands=(
  page'[generate page]'
  provider'[generate provider]'
  pipe'[generate pipe]'
  component'[generate component]'
  directive'[generate directive]'
  )

  _values 'command' $commands
  ;;
  esac
}

__ionic_run(){
  __ionic_platform_select
}

__ionic_build(){
  __ionic_platform_select
}

__ionic_emulate(){
  __ionic_platform_select
}

__ionic_platform_add(){
  __ionic_platform_select
}

__ionic_platform_remove(){
  __ionic_platform_select
}

__ionic_platform_rm(){
  __ionic_platform_select
}

__ionic_platform_select(){
  _values 'platform' 'ios' 'android'
}

_ionic "$@"
